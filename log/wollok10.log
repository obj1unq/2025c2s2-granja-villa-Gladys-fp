{"level":"error","message":"✘ Failed to rebuild document Failed to parse tetsVilla.wtest: \n-- PARSING FAILED --------------------------------------------------\n\n   7 | \n   8 | describe \"{\n>  9 |   test \"description\" {\n     |         ^\n  10 |     \n  11 |   }\n\nExpected one of the following: \n\n'{', whitespace\n","stack":"Error: Failed to parse tetsVilla.wtest: \n-- PARSING FAILED --------------------------------------------------\n\n   7 | \n   8 | describe \"{\n>  9 |   test \"description\" {\n     |         ^\n  10 |     \n  11 |   }\n\nExpected one of the following: \n\n'{', whitespace\n\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2348:13026\n    at Array.map (<anonymous>)\n    at W1n (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2348:12950)\n    at U2.buildEnvironmentFrom (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:5254)\n    at U2.updateEnvironmentWith (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:4989)\n    at JF (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:7383)\n    at F3.invoke (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:3:157334)\n    at o.fire (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:3:158104)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:57871\n    at Zr (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:8:1561)","timestamp":"2025-10-17T12:18:02.941Z"}
{"level":"error","message":"✘ Failed to rebuild document Failed to parse tetsVilla.wtest: \n-- PARSING FAILED --------------------------------------------------\n\n   6 | \n   7 | \n>  8 | describe {\n     |          ^\n   9 |   test \"description\" {\n  10 |     \n\nExpected one of the following: \n\nstring literal, whitespace\n","stack":"Error: Failed to parse tetsVilla.wtest: \n-- PARSING FAILED --------------------------------------------------\n\n   6 | \n   7 | \n>  8 | describe {\n     |          ^\n   9 |   test \"description\" {\n  10 |     \n\nExpected one of the following: \n\nstring literal, whitespace\n\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2348:13026\n    at Array.map (<anonymous>)\n    at W1n (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2348:12950)\n    at U2.buildEnvironmentFrom (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:5254)\n    at U2.updateEnvironmentWith (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:4989)\n    at JF (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:7383)\n    at F3.invoke (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:3:157334)\n    at o.fire (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:3:158104)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:57871\n    at Zr (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:8:1561)","timestamp":"2025-10-17T12:18:03.366Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":102,"timestamp":"2025-10-17T12:18:15.792Z"}
{"errors":{"errors":[null,["/*\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:20:32.672Z"}
{"errors":{"errors":[null,["/*\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:20:38.310Z"}
{"errors":{"errors":[null,["/*\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:20:38.614Z"}
{"errors":{"errors":[null,["/*\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:20:40.993Z"}
{"errors":{"errors":[null,["/*\r","describe \"Cosechar\" {\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:21:08.584Z"}
{"errors":{"errors":[null,["/*\r","describe \"Cosechar\" {\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:21:10.969Z"}
{"errors":{"errors":[null,["/*\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:21:19.019Z"}
{"errors":{"errors":[null,["/*\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:22:00.299Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":1,"failed":0,"ok":0},"testsFailed":[{"error":["wollok.lang.DomainException: La parcela esta ocupada","  at If [personaje.wlk:50]\r","  at personaje.personaje.esParcelaDisponible() [personaje.wlk:49]\r","  at personaje.personaje.sembrarTrigo() [personaje.wlk:19]\r","  at tetsVilla.\"Sembrar, cosechar y regar Trigo\".\"sembrar trigo\" [tetsVilla.wtest:13]"],"test":"tetsVilla.\"Sembrar, cosechar y regar Trigo\".\"sembrar trigo\""}],"timeElapsed":287,"timestamp":"2025-10-17T12:22:11.719Z"}
{"errors":{"errors":[null,["/*\r","describe \"Sembrar, cosechar y regar Tomate\" {\r","method initialize() {\r","personaje.sembrarTomate()\r","}\r","test \"sembrar tomate\" {\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Tomaco\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar tomato\" {\r","personaje.sembrarTomate()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomate()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().isEmpty())\r","}\r","}\r","describe \"Sembrar, cosechar y regar Maiz\" {\r","method initialize() {\r","personaje.sembrarMaiz()\r","}\r","test \"sembrar maiz\" {\r","personaje.sembrarMaiz()\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Maiz\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.cultivosSembrados().first().esBebe())\r","}\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T12:22:23.397Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":288,"timestamp":"2025-10-17T12:22:25.370Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":1,"failed":0,"ok":0},"testsFailed":[{"error":["wollok.lang.MessageNotUnderstoodException: a Trigo does not understand etapaDeEvolucion()","  at tetsVilla.\"Sembrar, cosechar y regar Trigo\".\"regar trigo\" [tetsVilla.wtest:18]"],"test":"tetsVilla.\"Sembrar, cosechar y regar Trigo\".\"regar trigo\""}],"timeElapsed":280,"timestamp":"2025-10-17T12:22:36.048Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:58] - tetsVilla.wtest) failed: Error: [Send]{94cf93} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{94cf93} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{94cf93} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:24:55.259Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:63] - tetsVilla.wtest) failed: Error: [Send]{a3e864} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{a3e864} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{a3e864} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:24:55.259Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:64] - tetsVilla.wtest) failed: Error: [Send]{2f3c0c} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{2f3c0c} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{2f3c0c} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:24:55.259Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:59] - tetsVilla.wtest) failed: Error: [Send]{c17f48} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{c17f48} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{c17f48} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:24:55.473Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:64] - tetsVilla.wtest) failed: Error: [Send]{ba4e13} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{ba4e13} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{ba4e13} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:24:55.473Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:65] - tetsVilla.wtest) failed: Error: [Send]{bc156e} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{bc156e} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{bc156e} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:24:55.473Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:60] - tetsVilla.wtest) failed: Error: [Send]{53b7a9} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{53b7a9} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{53b7a9} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:24:55.795Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:65] - tetsVilla.wtest) failed: Error: [Send]{668746} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{668746} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{668746} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:24:55.796Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:66] - tetsVilla.wtest) failed: Error: [Send]{f1284d} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{f1284d} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{f1284d} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:24:55.796Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:61] - tetsVilla.wtest) failed: Error: [Send]{e1eaa4} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{e1eaa4} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{e1eaa4} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:24:55.957Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:66] - tetsVilla.wtest) failed: Error: [Send]{32ef3a} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{32ef3a} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{32ef3a} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:24:55.957Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:67] - tetsVilla.wtest) failed: Error: [Send]{555c69} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{555c69} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{555c69} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:24:55.957Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:62] - tetsVilla.wtest) failed: Error: [Send]{c53ace} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{c53ace} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{c53ace} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:24:56.257Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:67] - tetsVilla.wtest) failed: Error: [Send]{48a1ed} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{48a1ed} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{48a1ed} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:24:56.258Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:68] - tetsVilla.wtest) failed: Error: [Send]{35b9c1} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{35b9c1} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{35b9c1} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:24:56.258Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:63] - tetsVilla.wtest) failed: Error: [Send]{79d579} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{79d579} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{79d579} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:24:56.512Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:68] - tetsVilla.wtest) failed: Error: [Send]{399dc5} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{399dc5} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{399dc5} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:24:56.512Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:69] - tetsVilla.wtest) failed: Error: [Send]{ecc09d} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{ecc09d} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{ecc09d} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:24:56.512Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:78] - tetsVilla.wtest) failed: Error: [Send]{9d1bc5} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{9d1bc5} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{9d1bc5} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at k6n (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1248)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6131\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:25:08.140Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:79] - tetsVilla.wtest) failed: Error: [Send]{41d457} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{41d457} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{41d457} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at k6n (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1248)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6131\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:25:08.141Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":104,"timestamp":"2025-10-17T12:25:30.504Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":272,"timestamp":"2025-10-17T12:26:47.308Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":112,"timestamp":"2025-10-17T12:27:02.363Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":302,"timestamp":"2025-10-17T12:28:17.287Z"}
{"errors":{"errors":[null,["/*\r","describe \"Sembrar, cosechar y regar Tomate\" {\r","method initialize() {\r","personaje.sembrarTomate()\r","}\r","test \"sembrar tomate\" {\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Tomaco\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar tomato\" {\r","personaje.sembrarTomate()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomate()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().isEmpty())\r","}\r","}\r","describe \"Sembrar, cosechar y regar Maiz\" {\r","method initialize() {\r","personaje.sembrarMaiz()\r","}\r","test \"sembrar maiz\" {\r","personaje.sembrarMaiz()\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Maiz\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.cultivosSembrados().first().esBebe())\r","}\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T12:28:41.024Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":1,"ok":2},"testsFailed":[{"error":["wollok.lib.AssertionException: Expected <1> but found <0>","  at tetsVilla.\"Sembrar, cosechar y regar Trigo\".\"cosechar trigo\" [tetsVilla.wtest:24]"],"test":"tetsVilla.\"Sembrar, cosechar y regar Trigo\".\"cosechar trigo\""}],"timeElapsed":339,"timestamp":"2025-10-17T12:28:43.761Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":1,"ok":0},"testsFailed":[{"error":["wollok.lib.AssertionException: Expected <1> but found <0>","  at tetsVilla.\"Sembrar, cosechar y regar Trigo\".\"cosechar trigo\" [tetsVilla.wtest:24]"],"test":"tetsVilla.\"Sembrar, cosechar y regar Trigo\".\"cosechar trigo\""}],"timeElapsed":308,"timestamp":"2025-10-17T12:28:53.652Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":281,"timestamp":"2025-10-17T12:29:33.098Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":3},"testsFailed":[],"timeElapsed":327,"timestamp":"2025-10-17T12:29:42.973Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":106,"timestamp":"2025-10-17T12:29:48.786Z"}
{"errors":{"errors":[null,["/*\r","describe \"Sembrar, cosechar y regar Tomate\" {\r","method initialize() {\r","personaje.sembrarTomate()\r","}\r","test \"sembrar tomate\" {\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Tomaco\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar tomato\" {\r","personaje.sembrarTomate()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomate()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().isEmpty())\r","}\r","}\r","describe \"Sembrar, cosechar y regar Maiz\" {\r","method initialize() {\r","personaje.sembrarMaiz()\r","}\r","test \"sembrar maiz\" {\r","personaje.sembrarMaiz()\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Maiz\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.cultivosSembrados().first().esBebe())\r","}\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T12:29:51.881Z"}
{"errors":{"errors":[null,["/*\r","describe \"Sembrar, cosechar y regar Tomate\" {\r","method initialize() {\r","personaje.sembrarTomate()\r","}\r","test \"sembrar tomate\" {\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Tomaco\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar tomato\" {\r","personaje.sembrarTomate()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomate()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().isEmpty())\r","}\r","}\r","describe \"Sembrar, cosechar y regar Maiz\" {\r","method initialize() {\r","personaje.sembrarMaiz()\r","}\r","test \"sembrar maiz\" {\r","personaje.sembrarMaiz()\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Maiz\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.cultivosSembrados().first().esBebe())\r","}\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:29:52.145Z"}
{"errors":{"errors":[null,["/*\r","describe \"Sembrar, cosechar y regar Tomate\" {\r","method initialize() {\r","personaje.sembrarTomate()\r","}\r","test \"sembrar tomate\" {\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Tomaco\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar tomato\" {\r","personaje.sembrarTomate()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomate()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().isEmpty())\r","}\r","}\r","describe \"Sembrar, cosechar y regar Maiz\" {\r","method initialize() {\r","personaje.sembrarMaiz()\r","}\r","test \"sembrar maiz\" {\r","personaje.sembrarMaiz()\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Maiz\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.cultivosSembrados().first().esBebe())\r","}\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:29:52.342Z"}
{"errors":{"errors":[null,["/*\r","describe \"Sembrar, cosechar y regar Tomate\" {\r","method initialize() {\r","personaje.sembrarTomate()\r","}\r","test \"sembrar tomate\" {\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Tomaco\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar tomato\" {\r","personaje.sembrarTomate()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomate()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().isEmpty())\r","}\r","}\r","describe \"Sembrar, cosechar y regar Maiz\" {\r","method initialize() {\r","personaje.sembrarMaiz()\r","}\r","test \"sembrar maiz\" {\r","personaje.sembrarMaiz()\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Maiz\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.cultivosSembrados().first().esBebe())\r","}\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Tomate\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar tomate\\\" {\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Tomaco\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomato\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomate()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:29:54.736Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":288,"timestamp":"2025-10-17T12:30:28.058Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":262,"timestamp":"2025-10-17T12:31:48.377Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":103,"timestamp":"2025-10-17T12:32:11.903Z"}
{"errors":{"errors":[null,["/*\r","describe \"Sembrar, cosechar y regar Maiz\" {\r","method initialize() {\r","personaje.sembrarMaiz()\r","}\r","test \"sembrar maiz\" {\r","personaje.sembrarMaiz()\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Maiz\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.cultivosSembrados().first().esBebe())\r","}\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:32:51.659Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":1,"ok":0},"testsFailed":[{"error":["wollok.lib.AssertionException: Expected <1> but found <0>","  at tetsVilla.\"Sembrar, cosechar y regar Tomate\".\"cosechar tomaco\" [tetsVilla.wtest:44]"],"test":"tetsVilla.\"Sembrar, cosechar y regar Tomate\".\"cosechar tomaco\""}],"timeElapsed":302,"timestamp":"2025-10-17T12:32:55.200Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":1,"failed":0,"ok":0},"testsFailed":[{"error":["wollok.lang.DomainException: no tengo nada para cocechar","  at If [personaje.wlk:60]\r","  at personaje.personaje.validarSiHayCultivoParaCosechar() [personaje.wlk:59]\r","  at personaje.personaje.cosechar() [personaje.wlk:95]\r","  at tetsVilla.\"Sembrar, cosechar y regar Tomate\".\"cosechar tomaco\" [tetsVilla.wtest:44]"],"test":"tetsVilla.\"Sembrar, cosechar y regar Tomate\".\"cosechar tomaco\""}],"timeElapsed":302,"timestamp":"2025-10-17T12:33:31.698Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":265,"timestamp":"2025-10-17T12:34:50.302Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":1,"failed":0,"ok":0},"testsFailed":[{"error":["wollok.lang.DomainException: no tengo nada para cocechar","  at If [personaje.wlk:60]\r","  at personaje.personaje.validarSiHayCultivoParaCosechar() [personaje.wlk:59]\r","  at personaje.personaje.cosechar() [personaje.wlk:95]\r","  at tetsVilla.\"Sembrar, cosechar y regar Tomate\".\"cosechar tomaco\" [tetsVilla.wtest:44]"],"test":"tetsVilla.\"Sembrar, cosechar y regar Tomate\".\"cosechar tomaco\""}],"timeElapsed":319,"timestamp":"2025-10-17T12:35:25.375Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":286,"timestamp":"2025-10-17T12:35:34.692Z"}
{"errors":{"errors":[null,["/*\r","describe \"Sembrar, cosechar y regar Maiz\" {\r","method initialize() {\r","personaje.sembrarMaiz()\r","}\r","test \"sembrar maiz\" {\r","personaje.sembrarMaiz()\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Maiz\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.cultivosSembrados().first().esBebe())\r","}\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T12:44:35.034Z"}
{"errors":{"errors":[null,["/*\r","describe \"Sembrar, cosechar y regar Maiz\" {\r","method initialize() {\r","personaje.sembrarMaiz()\r","}\r","test \"sembrar maiz\" {\r","personaje.sembrarMaiz()\r","assert.equals(1, personaje.cultivosSembrados().size())\r","assert.equals(\"a Maiz\", personaje.cultivosSembrados().first().kindName())\r","}\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.cultivosSembrados().first().esBebe())\r","}\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Sembrar, cosechar y regar Maiz\\\" {\\r\",\n      \"method initialize() {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"}\\r\",\n      \"test \\\"sembrar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"assert.equals(1, personaje.cultivosSembrados().size())\\r\",\n      \"assert.equals(\\\"a Maiz\\\", personaje.cultivosSembrados().first().kindName())\\r\",\n      \"}\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T12:44:35.447Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":285,"timestamp":"2025-10-17T12:45:13.370Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":280,"timestamp":"2025-10-17T12:45:39.099Z"}
{"level":"error","message":"✘ Completions for node Send ([62:4, 62:74] - tetsVilla.wtest) failed: Error: [Send]{b8b812} at tetsVilla.wtest:62 exhausted all cases without a match [Send]{b8b812} at tetsVilla.wtest:62 exhausted all cases without a match","stack":"Error: [Send]{b8b812} at tetsVilla.wtest:62 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at k6n (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1248)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6131\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:46:23.985Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":263,"timestamp":"2025-10-17T12:46:49.032Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":308,"timestamp":"2025-10-17T12:47:34.811Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":3},"testsFailed":[],"timeElapsed":285,"timestamp":"2025-10-17T12:47:51.227Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":3},"testsFailed":[],"timeElapsed":281,"timestamp":"2025-10-17T12:47:58.135Z"}
{"errors":{"errors":[null,["/*\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T12:48:59.978Z"}
{"errors":{"errors":[null,["/*\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T12:49:00.328Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":9},"testsFailed":[],"timeElapsed":344,"timestamp":"2025-10-17T12:49:17.553Z"}
{"errors":{"errors":[null,["/*\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:50:04.575Z"}
{"errors":{"errors":[null,["/*\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:50:04.854Z"}
