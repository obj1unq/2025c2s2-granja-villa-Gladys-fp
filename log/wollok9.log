{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":115,"timestamp":"2025-10-17T11:14:48.074Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":136,"timestamp":"2025-10-17T11:14:56.351Z"}
{"level":"info","message":"⌛ Building environment","timeElapsed":125,"timestamp":"2025-10-17T11:14:56.933Z"}
{"level":"info","message":"⌛ Building environment","timeElapsed":177,"timestamp":"2025-10-17T11:15:04.585Z"}
{"level":"info","message":"⌛ Building environment","timeElapsed":105,"timestamp":"2025-10-17T11:17:29.279Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":103,"timestamp":"2025-10-17T11:17:29.384Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.objetoEncima().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T11:17:48.011Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":1,"failed":0,"ok":0},"testsFailed":[{"error":["wollok.lang.Exception: Illegal operation 'head' on empty collection","  at tetsVilla.\"Sembrar\".\"sembrar maiz\" [tetsVilla.wtest:10]"],"test":"tetsVilla.\"Sembrar\".\"sembrar maiz\""}],"timeElapsed":285,"timestamp":"2025-10-17T11:17:53.996Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.objetoEncima().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T11:17:56.805Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":1,"ok":0},"testsFailed":[{"error":["wollok.lib.AssertionException: Expected <[a List (1)]> but found <[a List (0)]>","  at tetsVilla.\"Sembrar\".\"sembrar maiz\" [tetsVilla.wtest:11]"],"test":"tetsVilla.\"Sembrar\".\"sembrar maiz\""}],"timeElapsed":315,"timestamp":"2025-10-17T11:18:05.156Z"}
{"level":"info","message":"⌛ Validating personaje.wlk","timeElapsed":130,"timestamp":"2025-10-17T11:20:17.267Z"}
{"level":"info","message":"⌛ Validating personaje.wlk","timeElapsed":109,"timestamp":"2025-10-17T11:20:19.847Z"}
{"level":"info","message":"⌛ Validating personaje.wlk","timeElapsed":101,"timestamp":"2025-10-17T11:20:23.362Z"}
{"level":"info","message":"⌛ Validating personaje.wlk","timeElapsed":104,"timestamp":"2025-10-17T11:20:38.582Z"}
{"level":"error","message":"✘ Completions for node Return ([83:3, 83:9] - personaje.wlk) failed: Error: [Return]{ef47fe} at personaje.wlk:83 exhausted all cases without a match [Return]{ef47fe} at personaje.wlk:83 exhausted all cases without a match","stack":"Error: [Return]{ef47fe} at personaje.wlk:83 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T11:20:45.355Z"}
{"level":"error","message":"✘ Completions for node Return ([83:3, 83:11] - personaje.wlk) failed: Error: [Return]{0da3c6} at personaje.wlk:83 exhausted all cases without a match [Return]{0da3c6} at personaje.wlk:83 exhausted all cases without a match","stack":"Error: [Return]{0da3c6} at personaje.wlk:83 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at k6n (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1248)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6131\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T11:20:46.843Z"}
{"level":"info","message":"⌛ Validating personaje.wlk","timeElapsed":111,"timestamp":"2025-10-17T11:21:20.323Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":1,"ok":0},"testsFailed":[{"error":["wollok.lib.AssertionException: Expected <[a List (1)]> but found <[a List (1)]>","  at tetsVilla.\"Sembrar\".\"sembrar maiz\" [tetsVilla.wtest:11]"],"test":"tetsVilla.\"Sembrar\".\"sembrar maiz\""}],"timeElapsed":270,"timestamp":"2025-10-17T11:23:40.614Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":109,"timestamp":"2025-10-17T11:25:42.513Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":107,"timestamp":"2025-10-17T11:25:44.290Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.objetoEncima().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T11:28:26.672Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.objetoEncima().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T11:28:49.262Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.objetoEncima().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T11:29:01.768Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.objetoEncima().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T11:29:13.732Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":1,"failed":0,"ok":0},"testsFailed":[{"error":["wollok.lang.Exception: Illegal operation 'head' on empty collection","  at tetsVilla.\"Sembrar\".\"sembrar maiz\" [tetsVilla.wtest:10]"],"test":"tetsVilla.\"Sembrar\".\"sembrar maiz\""}],"timeElapsed":290,"timestamp":"2025-10-17T11:29:26.954Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.objetoEncima().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T11:30:04.141Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.objetoEncima().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T11:30:04.470Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.objetoEncima().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T11:30:11.993Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":279,"timestamp":"2025-10-17T11:30:14.325Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.objetoEncima().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T11:33:44.214Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.objetoEncima().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T11:43:24.420Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":124,"timestamp":"2025-10-17T11:43:58.685Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":103,"timestamp":"2025-10-17T11:43:59.304Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":116,"timestamp":"2025-10-17T11:45:02.423Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":114,"timestamp":"2025-10-17T11:46:12.573Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":114,"timestamp":"2025-10-17T11:46:13.909Z"}
{"level":"error","message":"✘ Completions for node Send ([15:4, 15:68] - tetsVilla.wtest) failed: Error: [Send]{b19f12} at tetsVilla.wtest:15 exhausted all cases without a match [Send]{b19f12} at tetsVilla.wtest:15 exhausted all cases without a match","stack":"Error: [Send]{b19f12} at tetsVilla.wtest:15 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T11:48:10.000Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":1,"ok":0},"testsFailed":[{"error":["wollok.lib.AssertionException: Value was not true","  at tetsVilla.\"Sembrar\".\"sembrar maiz\" [tetsVilla.wtest:14]"],"test":"tetsVilla.\"Sembrar\".\"sembrar maiz\""}],"timeElapsed":286,"timestamp":"2025-10-17T11:48:58.631Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":107,"timestamp":"2025-10-17T11:56:24.765Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":1,"ok":0},"testsFailed":[{"error":["wollok.lib.AssertionException: Value was not true","  at tetsVilla.\"Sembrar\".\"sembrar maiz\" [tetsVilla.wtest:15]"],"test":"tetsVilla.\"Sembrar\".\"sembrar maiz\""}],"timeElapsed":294,"timestamp":"2025-10-17T11:57:46.204Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.objetoEncima().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T11:58:24.728Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":1,"ok":0},"testsFailed":[{"error":["wollok.lib.AssertionException: Value was not true","  at tetsVilla.\"Sembrar\".\"sembrar maiz\" [tetsVilla.wtest:15]"],"test":"tetsVilla.\"Sembrar\".\"sembrar maiz\""}],"timeElapsed":316,"timestamp":"2025-10-17T11:58:26.827Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":281,"timestamp":"2025-10-17T11:58:54.830Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":102,"timestamp":"2025-10-17T11:59:13.018Z"}
{"level":"error","message":"✘ Completions for node Send ([12:4, 12:58] - tetsVilla.wtest) failed: Error: [Send]{f469cb} at tetsVilla.wtest:12 exhausted all cases without a match [Send]{f469cb} at tetsVilla.wtest:12 exhausted all cases without a match","stack":"Error: [Send]{f469cb} at tetsVilla.wtest:12 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at k6n (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1248)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6131\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T11:59:22.463Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":126,"timestamp":"2025-10-17T12:00:07.023Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.objetoEncima().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.objetoEncima().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.objetoEncima().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.objetoEncima().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T12:00:14.936Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":1,"ok":0},"testsFailed":[{"error":["wollok.lib.AssertionException: Value was not true","  at tetsVilla.\"Sembrar\".\"sembrar maiz\" [tetsVilla.wtest:13]"],"test":"tetsVilla.\"Sembrar\".\"sembrar maiz\""}],"timeElapsed":294,"timestamp":"2025-10-17T12:00:17.051Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":1,"ok":0},"testsFailed":[{"error":["wollok.lib.AssertionException: Value was not true","  at tetsVilla.\"Sembrar\".\"sembrar maiz\" [tetsVilla.wtest:13]"],"test":"tetsVilla.\"Sembrar\".\"sembrar maiz\""}],"timeElapsed":301,"timestamp":"2025-10-17T12:06:12.406Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":1},"testsFailed":[],"timeElapsed":300,"timestamp":"2025-10-17T12:08:35.934Z"}
{"level":"error","message":"✘ Failed to rebuild document Failed to parse tetsVilla.wtest: \n-- PARSING FAILED --------------------------------------------------\n\nGot the end of the input\n\nExpected one of the following: \n\n'@', 'const', 'method', 'only', 'override', 'test', 'var', '{', '}', any character/byte, comment, whitespace\n","stack":"Error: Failed to parse tetsVilla.wtest: \n-- PARSING FAILED --------------------------------------------------\n\nGot the end of the input\n\nExpected one of the following: \n\n'@', 'const', 'method', 'only', 'override', 'test', 'var', '{', '}', any character/byte, comment, whitespace\n\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2348:13026\n    at Array.map (<anonymous>)\n    at W1n (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2348:12950)\n    at U2.buildEnvironmentFrom (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:5254)\n    at U2.updateEnvironmentWith (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:4989)\n    at JF (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:7383)\n    at F3.invoke (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:3:157334)\n    at o.fire (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:3:158104)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:57871\n    at Zr (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:8:1561)","timestamp":"2025-10-17T12:09:17.793Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":106,"timestamp":"2025-10-17T12:09:20.575Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:30] - tetsVilla.wtest) failed: Error: [Send]{56c834} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{56c834} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{56c834} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:33.381Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:38] - tetsVilla.wtest) failed: Error: [Send]{d0b3c3} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{d0b3c3} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{d0b3c3} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:33.381Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:49] - tetsVilla.wtest) failed: Error: [Send]{76b2b6} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{76b2b6} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{76b2b6} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:33.381Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:62] - tetsVilla.wtest) failed: Error: [Send]{08a5d3} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{08a5d3} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{08a5d3} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:33.381Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:63] - tetsVilla.wtest) failed: Error: [Send]{cd516e} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{cd516e} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{cd516e} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:33.381Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:32] - tetsVilla.wtest) failed: Error: [Send]{4943cc} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{4943cc} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{4943cc} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:33.864Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:40] - tetsVilla.wtest) failed: Error: [Send]{45b795} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{45b795} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{45b795} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:33.864Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:51] - tetsVilla.wtest) failed: Error: [Send]{0c338d} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{0c338d} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{0c338d} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:33.864Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:64] - tetsVilla.wtest) failed: Error: [Send]{d0fa55} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{d0fa55} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{d0fa55} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:33.864Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:65] - tetsVilla.wtest) failed: Error: [Send]{45db50} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{45db50} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{45db50} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:33.864Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:33] - tetsVilla.wtest) failed: Error: [Send]{204f19} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{204f19} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{204f19} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:34.164Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:41] - tetsVilla.wtest) failed: Error: [Send]{41db83} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{41db83} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{41db83} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:34.164Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:52] - tetsVilla.wtest) failed: Error: [Send]{c113cc} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{c113cc} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{c113cc} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:34.165Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:65] - tetsVilla.wtest) failed: Error: [Send]{eefd10} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{eefd10} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{eefd10} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:34.165Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:66] - tetsVilla.wtest) failed: Error: [Send]{a123a2} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{a123a2} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{a123a2} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:34.165Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:34] - tetsVilla.wtest) failed: Error: [Send]{7c3fa4} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{7c3fa4} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{7c3fa4} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:34.428Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:42] - tetsVilla.wtest) failed: Error: [Send]{3425be} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{3425be} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{3425be} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:34.428Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:53] - tetsVilla.wtest) failed: Error: [Send]{7841af} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{7841af} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{7841af} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:34.428Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:66] - tetsVilla.wtest) failed: Error: [Send]{cce2e6} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{cce2e6} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{cce2e6} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:34.428Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:67] - tetsVilla.wtest) failed: Error: [Send]{73eb69} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{73eb69} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{73eb69} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:34.428Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:35] - tetsVilla.wtest) failed: Error: [Send]{eb9825} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{eb9825} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{eb9825} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:35.033Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:43] - tetsVilla.wtest) failed: Error: [Send]{ff0298} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{ff0298} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{ff0298} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:35.033Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:54] - tetsVilla.wtest) failed: Error: [Send]{70a4cb} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{70a4cb} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{70a4cb} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:35.033Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:67] - tetsVilla.wtest) failed: Error: [Send]{a69b00} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{a69b00} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{a69b00} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:35.033Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:68] - tetsVilla.wtest) failed: Error: [Send]{cc52d2} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{cc52d2} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{cc52d2} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:35.033Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:36] - tetsVilla.wtest) failed: Error: [Send]{27fc98} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{27fc98} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{27fc98} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:35.209Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:44] - tetsVilla.wtest) failed: Error: [Send]{db8a80} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{db8a80} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{db8a80} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:35.210Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:55] - tetsVilla.wtest) failed: Error: [Send]{8d0af7} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{8d0af7} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{8d0af7} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:35.210Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:68] - tetsVilla.wtest) failed: Error: [Send]{be3c0e} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{be3c0e} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{be3c0e} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:35.210Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:69] - tetsVilla.wtest) failed: Error: [Send]{5b8eb9} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{5b8eb9} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{5b8eb9} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:35.210Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:37] - tetsVilla.wtest) failed: Error: [Send]{cb3396} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{cb3396} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{cb3396} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:35.355Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:45] - tetsVilla.wtest) failed: Error: [Send]{ede71f} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{ede71f} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{ede71f} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:35.355Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:56] - tetsVilla.wtest) failed: Error: [Send]{e9d248} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{e9d248} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{e9d248} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:35.356Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:69] - tetsVilla.wtest) failed: Error: [Send]{bd7324} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{bd7324} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{bd7324} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:35.356Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:70] - tetsVilla.wtest) failed: Error: [Send]{ab318b} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{ab318b} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{ab318b} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:35.356Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:38] - tetsVilla.wtest) failed: Error: [Send]{f17978} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{f17978} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{f17978} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:36.011Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:46] - tetsVilla.wtest) failed: Error: [Send]{6caae3} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{6caae3} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{6caae3} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:36.011Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:57] - tetsVilla.wtest) failed: Error: [Send]{045065} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{045065} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{045065} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:36.011Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:70] - tetsVilla.wtest) failed: Error: [Send]{ddf1d1} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{ddf1d1} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{ddf1d1} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:36.011Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:71] - tetsVilla.wtest) failed: Error: [Send]{899705} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{899705} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{899705} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:36.011Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:38] - tetsVilla.wtest) failed: Error: [Send]{52470f} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{52470f} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{52470f} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:37.534Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:46] - tetsVilla.wtest) failed: Error: [Send]{e218bf} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{e218bf} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{e218bf} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:37.535Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:57] - tetsVilla.wtest) failed: Error: [Send]{960494} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{960494} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{960494} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:37.535Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:70] - tetsVilla.wtest) failed: Error: [Send]{80907e} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{80907e} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{80907e} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:37.535Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:71] - tetsVilla.wtest) failed: Error: [Send]{896f2b} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{896f2b} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{896f2b} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:37.535Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:39] - tetsVilla.wtest) failed: Error: [Send]{965fab} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{965fab} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{965fab} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:37.752Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:47] - tetsVilla.wtest) failed: Error: [Send]{02a3d9} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{02a3d9} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{02a3d9} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:37.752Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:58] - tetsVilla.wtest) failed: Error: [Send]{2e246f} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{2e246f} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{2e246f} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:37.752Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:71] - tetsVilla.wtest) failed: Error: [Send]{c0b3e4} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{c0b3e4} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{c0b3e4} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:37.752Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:72] - tetsVilla.wtest) failed: Error: [Send]{3ddfd6} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{3ddfd6} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{3ddfd6} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:37.752Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:40] - tetsVilla.wtest) failed: Error: [Send]{dcdb96} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{dcdb96} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{dcdb96} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:38.337Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:48] - tetsVilla.wtest) failed: Error: [Send]{71190a} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{71190a} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{71190a} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:38.337Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:59] - tetsVilla.wtest) failed: Error: [Send]{fa898a} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{fa898a} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{fa898a} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:38.337Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:72] - tetsVilla.wtest) failed: Error: [Send]{4d428d} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{4d428d} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{4d428d} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:38.337Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:73] - tetsVilla.wtest) failed: Error: [Send]{fcac47} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{fcac47} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{fcac47} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:38.337Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:41] - tetsVilla.wtest) failed: Error: [Send]{e758a8} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{e758a8} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{e758a8} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:38.635Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:49] - tetsVilla.wtest) failed: Error: [Send]{0f26fb} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{0f26fb} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{0f26fb} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:38.635Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:60] - tetsVilla.wtest) failed: Error: [Send]{95e12c} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{95e12c} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{95e12c} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:38.635Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:73] - tetsVilla.wtest) failed: Error: [Send]{4da3c5} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{4da3c5} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{4da3c5} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:38.635Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:74] - tetsVilla.wtest) failed: Error: [Send]{3f736a} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{3f736a} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{3f736a} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:38.635Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:42] - tetsVilla.wtest) failed: Error: [Send]{9d74b2} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{9d74b2} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{9d74b2} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:38.949Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:50] - tetsVilla.wtest) failed: Error: [Send]{9c177e} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{9c177e} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{9c177e} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:38.949Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:61] - tetsVilla.wtest) failed: Error: [Send]{2c4c3b} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{2c4c3b} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{2c4c3b} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:38.949Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:74] - tetsVilla.wtest) failed: Error: [Send]{366aa0} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{366aa0} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{366aa0} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:38.949Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:75] - tetsVilla.wtest) failed: Error: [Send]{8109ea} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{8109ea} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{8109ea} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:38.950Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:43] - tetsVilla.wtest) failed: Error: [Send]{06ab20} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{06ab20} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{06ab20} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:39.201Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:51] - tetsVilla.wtest) failed: Error: [Send]{37c37e} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{37c37e} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{37c37e} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:39.201Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:62] - tetsVilla.wtest) failed: Error: [Send]{6f2685} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{6f2685} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{6f2685} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:39.201Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:75] - tetsVilla.wtest) failed: Error: [Send]{fb9f66} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{fb9f66} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{fb9f66} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:39.201Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:76] - tetsVilla.wtest) failed: Error: [Send]{65c14b} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{65c14b} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{65c14b} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:39.201Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:44] - tetsVilla.wtest) failed: Error: [Send]{a9b7da} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{a9b7da} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{a9b7da} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:39.441Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:52] - tetsVilla.wtest) failed: Error: [Send]{3eff74} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{3eff74} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{3eff74} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:39.441Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:63] - tetsVilla.wtest) failed: Error: [Send]{0e2310} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{0e2310} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{0e2310} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:39.441Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:76] - tetsVilla.wtest) failed: Error: [Send]{ae3007} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{ae3007} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{ae3007} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:39.441Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:77] - tetsVilla.wtest) failed: Error: [Send]{a94347} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{a94347} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{a94347} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:39.441Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:45] - tetsVilla.wtest) failed: Error: [Send]{f9ae76} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{f9ae76} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{f9ae76} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:39.608Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:53] - tetsVilla.wtest) failed: Error: [Send]{5d2195} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{5d2195} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{5d2195} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:39.608Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:64] - tetsVilla.wtest) failed: Error: [Send]{f3752c} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{f3752c} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{f3752c} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:39.608Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:77] - tetsVilla.wtest) failed: Error: [Send]{853b6b} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{853b6b} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{853b6b} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:39.608Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:78] - tetsVilla.wtest) failed: Error: [Send]{3c6715} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{3c6715} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{3c6715} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:39.608Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:46] - tetsVilla.wtest) failed: Error: [Send]{199891} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{199891} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{199891} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:39.771Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:54] - tetsVilla.wtest) failed: Error: [Send]{f48fe8} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{f48fe8} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{f48fe8} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)","timestamp":"2025-10-17T12:10:39.771Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:65] - tetsVilla.wtest) failed: Error: [Send]{7165e0} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{7165e0} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{7165e0} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)","timestamp":"2025-10-17T12:10:39.772Z"}
{"level":"error","message":"✘ Completions for node Send ([18:17, 18:78] - tetsVilla.wtest) failed: Error: [Send]{3c12ff} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{3c12ff} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{3c12ff} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440","timestamp":"2025-10-17T12:10:39.772Z"}
{"level":"error","message":"✘ Completions for node Send ([18:4, 18:79] - tetsVilla.wtest) failed: Error: [Send]{76d9e9} at tetsVilla.wtest:18 exhausted all cases without a match [Send]{76d9e9} at tetsVilla.wtest:18 exhausted all cases without a match","stack":"Error: [Send]{76d9e9} at tetsVilla.wtest:18 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)\n    at Qh (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:1092)\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:544)","timestamp":"2025-10-17T12:10:39.772Z"}
{"level":"error","message":"✘ Completions for node Send ([22:5, 22:30] - tetsVilla.wtest) failed: Error: [Send]{9e8619} at tetsVilla.wtest:22 exhausted all cases without a match [Send]{9e8619} at tetsVilla.wtest:22 exhausted all cases without a match","stack":"Error: [Send]{9e8619} at tetsVilla.wtest:22 exhausted all cases without a match\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:38:6142\n    at D2 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:42)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2384:2988\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:8440\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:37:74872\n    at Ye (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:8527)\n    at qt (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6189)\n    at ot (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6378)\n    at Immediate._onImmediate (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:7:6142)\n    at process.processImmediate (node:internal/timers:485:21)","timestamp":"2025-10-17T12:10:51.933Z"}
{"level":"info","message":"⌛ Validating tetsVilla.wtest","timeElapsed":101,"timestamp":"2025-10-17T12:11:41.075Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.cultivosSembrados().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Gbn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3396)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:2393:847","timestamp":"2025-10-17T12:12:36.968Z"}
{"level":"info","message":"🧪 Test runner executed on c:\\Users\\janet\\Desktop\\actividades wollof\\2025c2s2-granja-villa-Gladys-fp","result":{"errored":0,"failed":0,"ok":3},"testsFailed":[],"timeElapsed":283,"timestamp":"2025-10-17T12:12:38.810Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.cultivosSembrados().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:13:54.194Z"}
{"errors":{"errors":[null,["/*\r","describe \"Regar\" {\r","test \"regar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","assert.that(not personaje.cultivosSembrados().first().esBebe())\r","}\r","test \"regar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().first().etapaDeEvolucion() == 1)\r","}\r","test \"regar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().first().image() == \"tomaco.png\") \r","//no se me ocurre otra manera pero no funciona :(\r","}\r","}\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Regar\\\" {\\r\",\n      \"test \\\"regar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(not personaje.cultivosSembrados().first().esBebe())\\r\",\n      \"}\\r\",\n      \"test \\\"regar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().first().image() == \\\"tomaco.png\\\") \\r\",\n      \"//no se me ocurre otra manera pero no funciona :(\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:13:55.652Z"}
{"errors":{"errors":[null,["/*\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:14:09.728Z"}
{"errors":{"errors":[null,["/*\r","describe \"Cosechar\" {\r","test \"cosechar maiz\" {\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar trigo\" {\r","personaje.sembrarTrigo()\r","personaje.regar()\r","personaje.regar()\r","personaje.cosechar()\r","assert.that(personaje.listaDeVenta().size() == 1)\r","}\r","test \"cosechar tomaco\" {\r","personaje.sembrarTomaco()\r","personaje.regar()\r","assert.that(personaje.cultivosSembrados().isEmpty())\r","}\r","}\r","describe \"Aspersores\" {\r","test \"poner aspersor\" {\r","personaje.ponerAspersor()\r","assert.that(personaje.aspersores().size() == 1)\r","}\r","test \"regar con aspersor maiz\" {\r","personaje.position(game.at(3,3))\r","var pos = game.at(3,4)\r","var maiz = new Maiz(position = pos, esBebe = true)\r","game.addVisual(maiz)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var maizDespues = game.getObjectsIn(pos)\r","assert.that(maizDespues.first().kindName() == \"a Maiz\")\r","assert.that(maizDespues.first().image() == \"corn_adult.png\")\r","}\r","test \"regar con aspersor trigo\" {\r","personaje.position(game.at(5,5))\r","var pos = game.at(4,5)\r","var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\r","game.addVisual(trigo)\r","personaje.ponerAspersor()\r","personaje.activarAspersor()\r","var trigoDespues = game.getObjectsIn(pos)\r","assert.that(trigoDespues.first().kindName() == \"a Trigo\")\r","assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\r","}\r","}\r","describe \"Venta mercado\" {\r","test \"venta\" {\r","personaje.position(game.at(2,2))\r","personaje.sembrarMaiz()\r","personaje.regar()\r","personaje.cosechar()\r","var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\r","game.addVisual(nuevoMercado)\r","personaje.position(game.at(1,1))\r","personaje.vender()\r","assert.that(personaje.cantidadDeMonedas() == 150)\r","assert.that(personaje.listaDeVenta().isEmpty())\r","assert.that(nuevoMercado.monedas() == 850)\r","}\r","//////////////////////////////////////////////////////////////////////\r","/////////////////////////////////////////////////////////////////////\r","describe \"Camión cargando y descargando vehículos\" {\r","test \"Carga y descarga del camion\" {\r","// Carga inicial de bumblebee\r","camion.cargar(bumblebee) \r","assert.equals(#{bumblebee}, camion.cosas())\r","// Carga adicional de Knight Rider\r","camion.cargar(knightRider)\r","assert.equals(#{bumblebee, knightRider}, camion.cosas())\r","// Descarga de bumblebee\r","camion.descargar(bumblebee)\r","assert.equals(#{knightRider}, camion.cosas())\r","// Intento de carga duplicada de Knight Rider\r","assert.throwsException({camion.cargar(knightRider)})\r","// Intento de descarga de bumblebee cuando no está\r","assert.throwsException({camion.descargar(bumblebee)})\r","}\r","}\r","describe \"Validación de pesos en el camión\"{\r","test \"Todo peso par\" {\r","arenaAGranel.peso(50)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.todoPesoEsPar())\r","}\r","test \"Todo peso es impar\"{  \r","arenaAGranel.peso(51)\r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.notThat(camion.todoPesoEsPar())\r","}\r","test \"Hay alguno que pesa\" {\r","arenaAGranel.peso(50) \r","camion.cargar(bumblebee)\r","camion.cargar(arenaAGranel)\r","assert.that(camion.tieneCosaConPeso(50))\r","assert.that(camion.tieneCosaConPeso(800))\r","assert.notThat(camion.tieneCosaConPeso(500))\r","}\r","test \"Peso no excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.pesoExcedido())\r","}\r","test \"Peso excedido\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(400)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.pesoExcedido())\r","}\r","}   \r","describe \"Peligrosidad de los objetos \"{\r","test \"Nivel de peligrosidad\" {\r","bumblebee.tranformarEn(auto)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","camion.cargar(bumblebee)\r","camion.cargar(residuosRadiactivos)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\r","assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\r","assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\r","bumblebee.tranformarEn(robot)\r","assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\r","bateriaAntiaerea.misiles(cargado)\r","assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\r","}\r","test \"Cosas peligrosas\" {\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(knightRider)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\r","assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\r","assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\r","assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\r","assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\r","assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\r","} \r","}\r","describe \"Circular en la ruta\" {\r","test \"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(300) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.that(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\" {\r","bumblebee.tranformarEn(auto) \r","paqueteDeLadrillos.cantidadDeLadrillos(400) \r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","test \"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\" {\r","bumblebee.tranformarEn(robot) \r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.notThat(camion.puedeCircularRutaDeNivel(20))\r","}\r","}\r","describe \"mas Cosas\"{\r","test \"contenedor Portuario vacio\" {\r","assert.equals(100, contenedorPortuario.peso())\r","assert.equals(0, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Contenedor cargado con Knight Rider y 50 kg de arena a granel\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","arenaAGranel.peso(50)\r","contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\r","assert.equals(650, contenedorPortuario.peso())\r","assert.equals(10, contenedorPortuario.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Knight Rider\" {\r","embalajeDeSeguridad.embalar(knightRider)\r","assert.equals(500, embalajeDeSeguridad.peso())\r","assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","test \"Embalaje de seguridad para Bumbleblee en modo auto\" {\r","bumblebee.tranformarEn(auto)\r","embalajeDeSeguridad.embalar(bumblebee)\r","assert.equals(800, embalajeDeSeguridad.peso())\r","assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\r","}\r","}\r","describe \"Cosa con con peso entre un valor maximo y minimo\" {\r","method initialize(){\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee) //800\r","camion.cargar(paqueteDeLadrillos) //600\r","}\r","test \"No tiene algo que pesa entre 5 y 100\" {\r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\r","}\r","test \"Tiene algo que pesa entre 5 y 1000\" {\r","assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\r","}\r","test \"No tiene algo que pese entre 900 y 1000\" { \r","assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\r","}\r","}\r","describe \"Todos los pesos de las cosas que tiene cargado el camion\" {\r","test \"Peso de Bumblebee y Paquete de ladrillos\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(300)\r","camion.cargar(bumblebee)\r","camion.cargar(paqueteDeLadrillos)\r","assert.equals([800,600], camion.pesoDeLasCosasCargadas())\r","}\r","}\r","describe \"Bultos que carga el camion\" {\r","test \"Primer caso\" {\r","contenedorPortuario.cargarCosaAContenedor(knightRider)\r","contenedorPortuario.cargarCosaAContenedor(bumblebee)\r","camion.cargar(contenedorPortuario)  \r","embalajeDeSeguridad.embalar(residuosRadiactivos)\r","camion.cargar(embalajeDeSeguridad)\r","camion.cargar(arenaAGranel)\r","paqueteDeLadrillos.cantidadDeLadrillos(50)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(descargado)\r","camion.cargar(bateriaAntiaerea)\r","assert.equals(9, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Segundo caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(150)\r","camion.cargar(paqueteDeLadrillos)\r","bateriaAntiaerea.misiles(cargado)\r","camion.cargar(bateriaAntiaerea)   \r","camion.cargar(contenedorPortuario)  \r","assert.equals(5, camion.cantidadDeBultosQueLleva()) \r","}\r","test \"Tercer caso\" {\r","paqueteDeLadrillos.cantidadDeLadrillos(350)\r","camion.cargar(paqueteDeLadrillos)\r","camion.cargar(arenaAGranel)   \r","assert.equals(4, camion.cantidadDeBultosQueLleva()) \r","}\r"]]},"level":"error","message":"✘ Failed to get type description: Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n} {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}","stack":"Error: {\n  \"errors\": [\n    null,\n    [\n      \"/*\\r\",\n      \"describe \\\"Cosechar\\\" {\\r\",\n      \"test \\\"cosechar maiz\\\" {\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar trigo\\\" {\\r\",\n      \"personaje.sembrarTrigo()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"assert.that(personaje.listaDeVenta().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"cosechar tomaco\\\" {\\r\",\n      \"personaje.sembrarTomaco()\\r\",\n      \"personaje.regar()\\r\",\n      \"assert.that(personaje.cultivosSembrados().isEmpty())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Aspersores\\\" {\\r\",\n      \"test \\\"poner aspersor\\\" {\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"assert.that(personaje.aspersores().size() == 1)\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor maiz\\\" {\\r\",\n      \"personaje.position(game.at(3,3))\\r\",\n      \"var pos = game.at(3,4)\\r\",\n      \"var maiz = new Maiz(position = pos, esBebe = true)\\r\",\n      \"game.addVisual(maiz)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var maizDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(maizDespues.first().kindName() == \\\"a Maiz\\\")\\r\",\n      \"assert.that(maizDespues.first().image() == \\\"corn_adult.png\\\")\\r\",\n      \"}\\r\",\n      \"test \\\"regar con aspersor trigo\\\" {\\r\",\n      \"personaje.position(game.at(5,5))\\r\",\n      \"var pos = game.at(4,5)\\r\",\n      \"var trigo = new Trigo(position = pos, etapaDeEvolucion = 0)\\r\",\n      \"game.addVisual(trigo)\\r\",\n      \"personaje.ponerAspersor()\\r\",\n      \"personaje.activarAspersor()\\r\",\n      \"var trigoDespues = game.getObjectsIn(pos)\\r\",\n      \"assert.that(trigoDespues.first().kindName() == \\\"a Trigo\\\")\\r\",\n      \"assert.that(trigoDespues.first().etapaDeEvolucion() == 1)\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Venta mercado\\\" {\\r\",\n      \"test \\\"venta\\\" {\\r\",\n      \"personaje.position(game.at(2,2))\\r\",\n      \"personaje.sembrarMaiz()\\r\",\n      \"personaje.regar()\\r\",\n      \"personaje.cosechar()\\r\",\n      \"var nuevoMercado = new Mercado(position = game.at(1,1), monedas = 1000)\\r\",\n      \"game.addVisual(nuevoMercado)\\r\",\n      \"personaje.position(game.at(1,1))\\r\",\n      \"personaje.vender()\\r\",\n      \"assert.that(personaje.cantidadDeMonedas() == 150)\\r\",\n      \"assert.that(personaje.listaDeVenta().isEmpty())\\r\",\n      \"assert.that(nuevoMercado.monedas() == 850)\\r\",\n      \"}\\r\",\n      \"//////////////////////////////////////////////////////////////////////\\r\",\n      \"/////////////////////////////////////////////////////////////////////\\r\",\n      \"describe \\\"Camión cargando y descargando vehículos\\\" {\\r\",\n      \"test \\\"Carga y descarga del camion\\\" {\\r\",\n      \"// Carga inicial de bumblebee\\r\",\n      \"camion.cargar(bumblebee) \\r\",\n      \"assert.equals(#{bumblebee}, camion.cosas())\\r\",\n      \"// Carga adicional de Knight Rider\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"assert.equals(#{bumblebee, knightRider}, camion.cosas())\\r\",\n      \"// Descarga de bumblebee\\r\",\n      \"camion.descargar(bumblebee)\\r\",\n      \"assert.equals(#{knightRider}, camion.cosas())\\r\",\n      \"// Intento de carga duplicada de Knight Rider\\r\",\n      \"assert.throwsException({camion.cargar(knightRider)})\\r\",\n      \"// Intento de descarga de bumblebee cuando no está\\r\",\n      \"assert.throwsException({camion.descargar(bumblebee)})\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Validación de pesos en el camión\\\"{\\r\",\n      \"test \\\"Todo peso par\\\" {\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Todo peso es impar\\\"{  \\r\",\n      \"arenaAGranel.peso(51)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.notThat(camion.todoPesoEsPar())\\r\",\n      \"}\\r\",\n      \"test \\\"Hay alguno que pesa\\\" {\\r\",\n      \"arenaAGranel.peso(50) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"assert.that(camion.tieneCosaConPeso(50))\\r\",\n      \"assert.that(camion.tieneCosaConPeso(800))\\r\",\n      \"assert.notThat(camion.tieneCosaConPeso(500))\\r\",\n      \"}\\r\",\n      \"test \\\"Peso no excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"test \\\"Peso excedido\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.pesoExcedido())\\r\",\n      \"}\\r\",\n      \"}   \\r\",\n      \"describe \\\"Peligrosidad de los objetos \\\"{\\r\",\n      \"test \\\"Nivel de peligrosidad\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(residuosRadiactivos)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(0))\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(15))\\r\",\n      \"assert.equals(residuosRadiactivos, camion.cantidadDePeligrosidadDe(200))\\r\",\n      \"assert.throwsException({ => camion.cantidadDePeligrosidadDe(30) })\\r\",\n      \"bumblebee.tranformarEn(robot)\\r\",\n      \"assert.equals(bumblebee, camion.cantidadDePeligrosidadDe(30))\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"assert.equals(bateriaAntiaerea, camion.cantidadDePeligrosidadDe(100))\\r\",\n      \"}\\r\",\n      \"test \\\"Cosas peligrosas\\\" {\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(knightRider)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(15))\\r\",\n      \"assert.equals(#{bateriaAntiaerea}, camion.cosasMasPeligrosasQue(bumblebee))\\r\",\n      \"assert.equals(#{knightRider, bateriaAntiaerea}, camion.cosasMasPeligrosasQueNivel(2))\\r\",\n      \"assert.equals(#{bateriaAntiaerea, knightRider}, camion.cosasMasPeligrosasQue(paqueteDeLadrillos))\\r\",\n      \"assert.equals(#{}, camion.cosasMasPeligrosasQueNivel(300))\\r\",\n      \"assert.equals(#{},camion.cosasMasPeligrosasQue(residuosRadiactivos))\\r\",\n      \"} \\r\",\n      \"}\\r\",\n      \"describe \\\"Circular en la ruta\\\" {\\r\",\n      \"test \\\"Puede circular con bumblebee en auto y 300 ladrillos en ruta nivel 20\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.that(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en auto y 400 ladrillos en ruta nivel 20 (exceso de peso)\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(400) \\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"test \\\"No puede circular con bumblebee en modo robot y 300 ladrillos en ruta nivel 20 (exceso de peligrosidad)\\\" {\\r\",\n      \"bumblebee.tranformarEn(robot) \\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.notThat(camion.puedeCircularRutaDeNivel(20))\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"mas Cosas\\\"{\\r\",\n      \"test \\\"contenedor Portuario vacio\\\" {\\r\",\n      \"assert.equals(100, contenedorPortuario.peso())\\r\",\n      \"assert.equals(0, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Contenedor cargado con Knight Rider y 50 kg de arena a granel\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"arenaAGranel.peso(50)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(arenaAGranel)\\r\",\n      \"assert.equals(650, contenedorPortuario.peso())\\r\",\n      \"assert.equals(10, contenedorPortuario.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Knight Rider\\\" {\\r\",\n      \"embalajeDeSeguridad.embalar(knightRider)\\r\",\n      \"assert.equals(500, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"test \\\"Embalaje de seguridad para Bumbleblee en modo auto\\\" {\\r\",\n      \"bumblebee.tranformarEn(auto)\\r\",\n      \"embalajeDeSeguridad.embalar(bumblebee)\\r\",\n      \"assert.equals(800, embalajeDeSeguridad.peso())\\r\",\n      \"assert.equals(7.5, embalajeDeSeguridad.nivelPeligrosidad())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Cosa con con peso entre un valor maximo y minimo\\\" {\\r\",\n      \"method initialize(){\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee) //800\\r\",\n      \"camion.cargar(paqueteDeLadrillos) //600\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pesa entre 5 y 100\\\" {\\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(5, 100) })\\r\",\n      \"}\\r\",\n      \"test \\\"Tiene algo que pesa entre 5 y 1000\\\" {\\r\",\n      \"assert.equals(true, camion.cosaQuePesaEntreLosValores(5, 1000) != null)\\r\",\n      \"}\\r\",\n      \"test \\\"No tiene algo que pese entre 900 y 1000\\\" { \\r\",\n      \"assert.throwsException({ camion.cosaQuePesaEntreLosValores(900, 1000) })\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Todos los pesos de las cosas que tiene cargado el camion\\\" {\\r\",\n      \"test \\\"Peso de Bumblebee y Paquete de ladrillos\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(300)\\r\",\n      \"camion.cargar(bumblebee)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"assert.equals([800,600], camion.pesoDeLasCosasCargadas())\\r\",\n      \"}\\r\",\n      \"}\\r\",\n      \"describe \\\"Bultos que carga el camion\\\" {\\r\",\n      \"test \\\"Primer caso\\\" {\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(knightRider)\\r\",\n      \"contenedorPortuario.cargarCosaAContenedor(bumblebee)\\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"embalajeDeSeguridad.embalar(residuosRadiactivos)\\r\",\n      \"camion.cargar(embalajeDeSeguridad)\\r\",\n      \"camion.cargar(arenaAGranel)\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(50)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(descargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)\\r\",\n      \"assert.equals(9, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Segundo caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(150)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"bateriaAntiaerea.misiles(cargado)\\r\",\n      \"camion.cargar(bateriaAntiaerea)   \\r\",\n      \"camion.cargar(contenedorPortuario)  \\r\",\n      \"assert.equals(5, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\",\n      \"test \\\"Tercer caso\\\" {\\r\",\n      \"paqueteDeLadrillos.cantidadDeLadrillos(350)\\r\",\n      \"camion.cargar(paqueteDeLadrillos)\\r\",\n      \"camion.cargar(arenaAGranel)   \\r\",\n      \"assert.equals(4, camion.cantidadDeBultosQueLleva()) \\r\",\n      \"}\\r\"\n    ]\n  ]\n}\n    at aS (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34609)\n    at K1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:34682)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37949\n    at o.g1 (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:58803)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:64:37918\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:57:56843\n    at Dfn (c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:11441)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:3629\n    at Array.map (<anonymous>)\n    at c:\\Users\\janet\\.vscode\\extensions\\uqbar.wollok-lsp-ide-0.5.3\\out\\server\\src\\server.js:68:4693","timestamp":"2025-10-17T12:15:47.010Z"}
